service: aws-starter-go
frameworkVersion: '3'
useDotenv: true

# ============================
# Common
# ============================
provider:
  name: aws
  profile: ${self:service}-${opt:stage, 'dev'}  # AWSプロファイル名(例: aws-starter-go-dev)
  region: ap-northeast-1
  stage: "${opt:stage, 'dev'}"
  runtime: provided.al2
  iam:
    role:
      statements:
        - Effect: Allow  # SSMからパラメータを取得するための権限
          Action: "ssm:GetParameter"
          Resource: "*"
        - Effect: Allow  # DynamoDBを操作するための権限
          Action: "dynamodb:*"
          Resource: "*"
        - Effect: Allow  # LambdaがVPCにアタッチするための権限
          Action: 
            - "ec2:CreateNetworkInterface"
            - "ec2:DescribeNetworkInterfaces"
            - "ec2:DeleteNetworkInterface"
            - "ec2:AssignPrivateIpAddresses"
            - "ec2:UnassignPrivateIpAddresses"
          Resource: "*"

plugins:
  - serverless-step-functions

package:
  individually: true
  patterns:
    - '!./**'
    - ./bin/**

# ============================
# Stage
# ============================
params:
  dev:
    PARAM1: "開発環境用の値1"
    PARAM2: "開発環境用の値2"
  stg:
    PARAM1: "ステージング環境用の値1"
    PARAM2: "ステージング環境用の値2"
  prd:
    PARAM1: "本番環境用の値1"
    PARAM2: "本番環境用の値2"

# ============================
# Lambda
# ============================
functions:
  hello:
    handler: bin/bootstrap
    package:
      artifact: bin/hello.zip
  hello2:
    handler: bin/bootstrap
    package:
      artifact: bin/hello2.zip

resources:
  Resources:
    # ============================
    # DynamoDB
    # ============================
    waitlistTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage, 'dev'}-hello
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # ============================
    # LogGroup
    # ============================
    HelloWorldStateMachineLogGroup:  # NOTE: ステートマシンのロググループ名を指定する
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: "/aws/states/${self:service}-${opt:stage, 'dev'}-HelloWorld"  # NOTE: ステートマシンのロググループ名を指定する

# ============================
# Step Functions
# ============================
stepFunctions:
  stateMachines:
    HelloWorldSateMachine:  # NOTE: ステートマシン名を指定する
      name: ${self:service}-${opt:stage, 'dev'}-HelloWorld  # NOTE: ステートマシン名を指定する
      type: EXPRESS
      # role: ""
      loggingConfig:
        level: ALL
        includeExecutionData: true
        destinations:
          - Fn::GetAtt: [HelloWorldStateMachineLogGroup, Arn]  # NOTE: ステートマシンのロググループ名を指定する
      events:
        - http:
            path: /helloworld  # NOTE: API Gatewayのパスを指定する
            method: post
            # iamRole: ""
            integration: aws
            action: StartSyncExecution
            request:
              template:  # NOTE: ステートマシン名を指定する
                application/json: |
                  {
                    "input": "{\"payload\": $util.escapeJavaScript($input.json('$')), \"authorization\": \"$util.escapeJavaScript($input.params().header.get('Authorization'))\"}",
                    "stateMachineArn":"arn:aws:states:${self:provider.region}:${aws:accountId}:stateMachine:${self:service}-${opt:stage, 'dev'}-helloworld",
                  }
            response:
              template:
                application/json: |
                  #set($outputJson = $util.parseJson($input.json('$.output')))
                  #set($context.responseOverride.status = $util.parseJson($outputJson).statusCode)
                  $util.parseJson($outputJson).body
      definition:
        Comment: "For HelloWorld"  # NOTE: ステートマシンのコメントを指定する
        StartAt: HelloWorld
        States:
          HelloWorld:
            Type: Task
            Next: HelloWorld2
            Resource:
              Fn::GetAtt: [hello, Arn]
          HelloWorld2:
            Type: Task
            End: True
            Resource:
              Fn::GetAtt: [hello, Arn]
